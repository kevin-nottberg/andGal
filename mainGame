package android.andGal.mainGame;

public class AndroidGal extends Activity implements onTouchListener
{
    AssetManager fdman;
    Bitmap bitMap1;
    Bitmap bitMap2;
    BitmapHandler bitmapHndler1;
    BitmapHandler bitmapHndler2;
    RenderView renView;
    
    Stirng imq1;
    String img2;
    
    SpaceShip tSpaceShip;
    SpaceShip bSpaceShip;
    
    int BLUE = 1;
    int YELLOW = 2;
    int RED = 3;
    int GREEN = 4;
    
    public void onCreate( Bundle savedInstanceState )
    {
        super.onCreate( savedInstanceState );
        
        tSpaceShip = new SpaceShip( RED );
        bSpaceShip = new SpaceShip( YELLOW );
        
        img1 = tSpaceShip.getImgAdd();
        img2 = tSpaceShip.getImgAdd();
        
        bitmapHndler1 = new BitMapHandler( this, assets, bitMap1 );
        bitmapHndler2 = new BitMapHandler( this, assets, bitMap2 );
        
        bitMap1 = imgLoad.createBitMap( img1 );
        bitMap2 = imgLoad.createBitMap( img2 );
        
        requestWindowFeature( Window.FEATURE_NO_TITLE );
    	getWindow().setFlags( WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN );
        
        renView = new RenderView( this );
        renView.setOnTouchListener( this );
        setContentView( renView );
        
    }
    
    public boolean onTouch( View v, MotionEvent event )
    {
		// Initilizing some varibles for multi-touch
		int halfHeight = renderView.getHeight() / 2;
		int maxCount = event.getPointerCount();
		int action = MotionEventCompat.getActionMasked( event );
		Log.d("KevinApp", "OnTouch: " + String.valueOf( action ));
		for ( int i = 0; i < maxCount; i++ )
		{
			// int mActivePointerId = event.getPointerId( i );
			// int pointerIndex = event.findPointerIndex( mActivePointerId );
			// int index = MotionEventCompat.getActionIndex( event );
   
			// Reacting to the finger taps
			switch( action )
			{
				case MotionEvent.ACTION_DOWN:
				case MotionEvent.ACTION_POINTER_DOWN:
				case MotionEvent.ACTION_MOVE:
					if ( MotionEventCompat.getY( event, i ) < halfHeight )
					{
						curPointPosXtwo = (int) MotionEventCompat.getX( event, i );
						// curPointPosYtwo = (int) MotionEventCompat.getY( event, i );
					}
					if ( MotionEventCompat.getY( event, i ) > halfHeight )
					{
						curPointPosXone = (int) MotionEventCompat.getX( event, i );
						// curPointPosYone = (int) MotionEventCompat.getY( event, i );
					}
			break;
			}
		}	
		return true;
	}
    
    public void onResume()
    {
        super.onResume();
        renView.resume();
    }
    
    public void onPause()
    {
        super.onPause();
        renView.pause();
    }
    
    public class RenderView extends SurfaceView implements Runnable
    {
        Thread renThread;
        SurfaceHolder holder;
        volatile boolean running = false;
        Paint paint;
        
        public RenderView( Context context )
        {   
            super( context );
            holder = getHolder();
            paint = new Paint();
        }
        
        public void resume()
        {
        	renThread = new Thread( this );
        	running = true;
        	renThread.start();
        }
        
        public void pause() 
		{
			Log.d("KevinMess", "renderPause");
			running = false;
			while( true )
			{
				try {
					renThread.join();
					return;
				} catch ( InterruptedException e ) {
					//retry
				}
			}
		}
        
        public void run()
        {
        	long startTime = System.nanoTime();
        	
        	while( running )
        	{
        		deltaTime = ( System.nanoTime - startTime ) * 1000000000.0f
        		
        		if ( !holder.getSurface().isValid() )
        			continue;
        			
        		Canvas canvas = holder.lockCanvas();
        		canvas.drawRGB( 0, 0, 0 );
        		paint.setStyle( Style.FILL );
        		int width = canvas.getWidth();
        		int height = canvas.getHeight();
        	
        		canvas.unlockCanvasAndPost( canvas );
        	}
        }
    }
    
    public class SpaceShip
    {
 		private int clipStat;
 		private int Color; 
		private int reloadLoop;
		private int bulletRX;
		private int bulletTY;
		private int bulletLX;
		private int bulletBY;
 	
    	public SpaceShip( int clr )
    	{
    		clipStat = 6;
    		reloadLoop = 0;
    		Color = clr;
    	}
    	
    	public void shoot()
    	{
    		if ( clipStat == 6 )
    		{
    			clipStat = 5;
    		}
    		
    		if ( clipStat == 5 )
    		{
    			clipStat = 4;
    		}
    		
    		if ( clipStat == 4 )
    		{
    			clipStat = 3;
    		}
    		
    		if ( clipStat == 3 )
    		{
    			clipStat = 2;
    		}
    		
    		if ( clipStat == 2 )
    		{
    			clipStat = 1;
    		}
    		
    		if ( clipStat == 1 )
    		{
    			clipStat = 0;
    		}
    		
    		if ( clipStat == 0 )
    		{
    			reloadLoop++;
    		}
    		
  			if ( clipStat == 0 && reloadLoop == 1 )
  			{
  				reloadLoop = 0;
  				clipStat == 6;
  			}
    	}
    	
    	public String getImgAdd()
    	{
    		if ( Color == BLUE )
    		{
				return "andgal_space_blu.png";
    		}
    		
    		if ( Color == YELLOW )
    		{
				return "andgal_space_ylw.png";
    		}
    		
    		if ( Color == RED )
    		{
    			return "andgal_space_red.png";
    		}
    		
    		if ( Color == GREEN )
    		{
    			return "andgal_spacee_grn.png";
    		}
    	}
    }
    
    public class BitmapHandler()
    {
    	AssetManager assets;
    	Bitmap bitmap;
    	Rect srcRect = new Rect();
    	Rect dstRect = new Rect();
    	
    	public BitmapHandler( Context context, AssetManager assets, Bitmap bitmap )
    	{
    		super( context );
    		this.assets = assets;
    		this.bitmap = bitmap;
    	}
    	
    	public void createBitMap( String img )
    	{
    		try {
    			assets = context.getAssets();
    			InputStream inputStream = assetManager.open( img );
    			bitmap = BitmapFactory.decodeSteam( inputStream );
    			
    		} catch (IOException e) {
    			// Spacer commet
    		} finally {
    			inputStream.close();
    		}
    	}
    	
    	public Bitmap getBitmap()
    	{
    		return bitmap;
    	}
    	
    	public void clearBitmap()
    	{
    		bitmap.recylce;
    	}
    	
    	public int height()
    	{
    		return bitmap.getHeight();
    	}
    	
    	public int width()
    	{
    		return bitmap.getWidth();
    	}
	}
