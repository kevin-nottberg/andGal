package com.android.andGal.mainGame;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import android.os.Bundle;
import android.app.Activity;
import android.support.v4.view.MotionEventCompat;
import android.util.Log;
import android.content.Context;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Rect;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.Window;
import android.view.WindowManager;


public class AndroidGal extends Activity implements OnTouchListener
{
 // All global objects needed
    FastRenderView renderView;
    View view;
    
    SpaceShip tSpaceShip;
    SpaceShip bSpaceShip;
    
    Rect topSrcRect;
    Rect bottomSrcRect;
    
    int BLUE = 1;
    int YELLOW = 2;
    int RED = 3;
    int GREEN = 4;
    
    int LEFT = 1;
    int RIGHT = 2;
    int UP = 3;
    int DOWN = 4;
    
    int topLeft;
    int topTop;
    int bottomLeft;
    int bottomTop;
    DataTracker datTrack;
    

	public void onCreate( Bundle savedInstanceState )
	{
		super.onCreate( savedInstanceState );
        
        // Initilizing the dataTracker
		datTrack = new DataTracker();
		
        tSpaceShip = new SpaceShip( this, BLUE, "TOP", RED );
        bSpaceShip = new SpaceShip( this, YELLOW, "BOTTOM", YELLOW );
        
        tSpaceShip.setImgAddress();
        bSpaceShip.setImgAddress();
        
   		tSpaceShip.createBitMap();
   		bSpaceShip.createBitMap();
   		
   		Log.d( "onCreate", "instillizing done" );
   		
   		view = new View( this );
   		
		// Requesting the fullscreen for the activity
   		requestWindowFeature( Window.FEATURE_NO_TITLE );
        getWindow().setFlags( WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN );
        view.setSystemUiVisibility (View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);
        
		// Starting up the rendering
		renderView = new FastRenderView( this );
		renderView.setOnTouchListener( this );
		setContentView( renderView );
	}

	public boolean onTouch( View v, MotionEvent event )
	{
		// Initilizing some varibles for multi-touch
		int halfHeight = renderView.getHeight() / 2;
		int maxCount = event.getPointerCount();
		int action = MotionEventCompat.getActionMasked( event );
		Log.d("KevinApp", "OnTouch: " + String.valueOf( action ));
		for ( int i = 0; i < maxCount; i++ )
		{
			// int mActivePointerId = event.getPointerId( i );
			// int pointerIndex = event.findPointerIndex( mActivePointerId );
			// int index = MotionEventCompat.getActionIndex( event );
   
			// Reacting to the finger taps
			switch( action )
			{
				case MotionEvent.ACTION_DOWN:
				case MotionEvent.ACTION_POINTER_DOWN:
				case MotionEvent.ACTION_MOVE:
					// Top player button eval
					if ( MotionEventCompat.getY( event, i ) <= halfHeight )
					{
						if ( MotionEventCompat.getX( event, i ) >= 700 && MotionEventCompat.getY( event, i ) <= 100 )
						{
							tSpaceShip.direction( RIGHT );
						}
						
						if ( MotionEventCompat.getX( event, i ) <= 699 && MotionEventCompat.getY( event, i ) <= 100 )
						{
							if ( MotionEventCompat.getX( event, i ) >= 599 && MotionEventCompat.getY( event, i ) <= 100 )
							{
								tSpaceShip.direction( LEFT );
							}	
						}
						
						if ( MotionEventCompat.getX( event, i ) <= 100 && MotionEventCompat.getY( event, i ) <= 100 )
						{
							tSpaceShip.shoot();
						}	
					}
					
					// Bottom Player button eval
					if ( MotionEventCompat.getY( event, i ) < halfHeight )
					{
						if ( MotionEventCompat.getX( event, i ) >= 700 && MotionEventCompat.getY( event, i ) > 1180 )
						{
							bSpaceShip.shoot();
						}	
					
						if ( MotionEventCompat.getX( event, i ) >= 101 && MotionEventCompat.getX( event, i ) <= 301 )
						{
							if ( MotionEventCompat.getY( event, i ) >= 1180 )
								bSpaceShip.direction( RIGHT );
						}
					
						if ( MotionEventCompat.getX( event, i ) <= 100 && MotionEventCompat.getY( event, i ) >= 1180 )
						{
							bSpaceShip.direction( LEFT );
						}
					}	
			break;
			}
		}	
		return true;
	}

	protected void onResume()
	{
		Log.d( "mainClass", "OnResume" );
		super.onResume();
		renderView.resume();
	}

	protected void onPause()
	{
		Log.d( "mainClass", "OnPause" );
		super.onPause();
		renderView.pause();
	}	  

	class FastRenderView extends SurfaceView implements Runnable 
	{
		Thread renderThread = null;
		SurfaceHolder holder;
		volatile boolean running = false;
		Paint paint;
 
		public FastRenderView( Context context )
		{
			super( context );
			holder = getHolder();
			paint = new Paint();
			Log.d( "renderClass", "Consructor works!" );
		}
 
		public void resume()
		{
			Log.d( "renderClass", "resume called" );
			running = true;
			renderThread = new Thread( this );
			renderThread.start();
		}	
 
		public void run()
		{
			Log.d( "renderClass", "before loop" );
			long startTime = System.nanoTime();
			while( running )
			{
				// Setting up the time
				float deltaTime = ( System.nanoTime() - startTime ) * 1000000000.0f;

				// Starting the main rendering part of the thread
				if( !holder.getSurface().isValid() )
					continue;
				Canvas canvas = holder.lockCanvas();

				Log.d( "renderClass", "starting to draw" );

				canvas.drawRGB( 0, 0, 0 );
				paint.setStyle( Style.FILL );
				int width = canvas.getWidth();
				int height = canvas.getHeight();

				canvas.drawBitmap( tSpaceShip.getBitmap(), datTrack.getTopX(), datTrack.getTopY(), null );
				canvas.drawBitmap( bSpaceShip.getBitmap(), datTrack.getBottX(), datTrack.getTopY(), null );
				
				tSpaceShip.getRect();

				// Cleaning and re-orientating
				holder.unlockCanvasAndPost( canvas );

				Log.d( "renderClass", "posted the canvas" );

			}
		}
 
		public void pause() 
		{
			Log.d( "renderClass", "pauseCalled");
			running = false;
			while( true )
			{
				try {
					renderThread.join();
					Log.d( "renderClass", "Pause thread joined" );
					return;
				} catch ( InterruptedException e ) {
					//retry
					Log.d( "renderClass", "interupped exception" );
				}
			}
		}
        
	}
    
    public class SpaceShip
    {
     	private int clipStat;
     	private boolean clipFull;
 		private int Colr; 
		private boolean reloadLoop;
		AssetManager assets;
    	Bitmap bitmap;
    	Context context;
    	private List<Object> bulletArray;
    	private String img;
    	private int direction;
    	private int pos;
    	private int shotsFired;
    	private float reloadStartTime;
    	private int reloadCount;
    	private int X;
    	private int Y;
    	Paint shotPaint;
 	
    	public SpaceShip( Context myContext, int clr, String topBottom, int shotColor )
    	{
    		Log.d( "SpaceClass", "Constructor works" );
    		
    		// Initalizing
    		clipFull = true;
    		reloadLoop = true;
    		Colr = clr;
    		context = myContext;
    		bulletArray = new ArrayList<Object>();
    		
    		// If to initalize
    		if ( topBottom == "BOTTOM" )
    		{
				X = 350;
				Y = 1180;
				pos = 2;
    			datTrack.reportUpdateBott( X, Y ) 
    		}
    		if ( topBottom == "TOP" )
    		{
    			X = 350;
    			Y = 0;
    			pos = 1;
    			datTrack.reportUpdate( X, Y );
    		}
    		
    		// If to initalize color
    		if ( shotColor == BLUE )
    		{
    			shotPaint.setColor( Color.BLUE );
    		}
    		else if ( shotColor == YELLOW )
    		{
    			shotPaint.setColor( Color.YELLOW );
    		}
    		else if ( shotColor == RED )
    		{
    			shotPaint.setColor( Color.RED );
    		}
    		else if ( shotColor == GREEN )
    		{
    			shotPaint.setColor( Color.GREEN );
    		}
    	}
    	
    	public void shoot()
    	{
    		if ( reloadLoop == true && clipFull == true )
    		{
    			shotsFired++;
    			
    			if ( shotsFired == 0 )
    			{
    				clipStat = 6;
    			}
    		
    			if ( shotsFired == 1 )
    			{
    				createNewProjectile();
    				clipStat = 5;
    			}
    		
    			if ( shotsFired == 2 )
    			{
    				createNewProjectile();
    				clipStat = 4;
    			}
    		
    			if ( shotsFired == 3 )
    			{
    				createNewProjectile();
    				clipStat = 3;
    			}
    		
    			if ( shotsFired == 4 )
    			{
    				createNewProjectile();
    				clipStat = 2;
    			}
    		
    			if ( shotsFired == 5 )
    			{
    				createNewProjectile();
    				clipStat = 1;
    			}
    		
    			if ( shotsFired == 6 )
    			{
    				createNewProjectile();
    				shotsFired = 0;
    				clipFull = false;
    				reloadLoop = false;
    			}
    		}
    		else { reload(); }
    	}
    	
    	public void reload()
    	{
    		if ( reloadCount <= 0 )
    			reloadCount++;
    			reloadStartTime = System.nanoTime();
    		if ( ( ( System.nanoTime() - reloadStartTime ) * 1000000000.0f ) >= 2.0 )
    			clipFull = true;
    			reloadLoop = true;
    			reloadCount = 0;
    	}
    	
    	public void direction( int directionStat )
    	{
    		direction = directionStat;
    	}
    	
    	public void createNewProjectile()
    	{
    		if ( bulletArray.size() <= 0 )
    		{
    			bulletArray.add( new Bullet( pos ) );
    		}
    		if ( bulletArray.size() >= 1 )
    		{	
    			for ( int i = 0; i <= bulletArray.size(); i++ )
    			{
    				Bullet o = ( Bullet ) bulletArray.get( i );
    				if ( o.getState() ==  0 )
    				{
    					o = new Bullet( pos );
    					break;
    				}	
    				if ( o.getState() == 0 && i == bulletArray.size() )
    				{	
    					bulletArray.add( new Bullet( pos ) );
    					break;
    				}			
    			}
    		}
    	}
    	
    	public void updatePos( float deltaTime )
    	{
    		float deltaMove = 5 * deltaTime;
    		if ( direction == LEFT && pos == 2 )
    		{
    			X = X - deltaMove;
    			datTrack.reportUpdateBott( X, Y );
    		}
    		
    		if ( direction == RIGHT && pos == 2 )
    		{
    			X = X + deltaMove;
    			datTrack.reportUpdateBott( X, Y );
    		}
    		
    		if ( direction == LEFT && pos == 1 )
    		{
    			X = X + deltaMove;
    			datTrack.reportUpdateTop( X, Y );
    		}
    		
    		if ( direction == RIGHT && pos == 1 )
    		{
    			X = X - deltaMove;
    			datTrack.reportUpdateTop( X, Y );
    		}
    		
    		if ( direction == null )
    		{
    			datTrack.reportUpdateTop( X, Y );
    		}
    		
    		collisionCheck();
    	}
    	
    	public void setImgAddress()
    	{
    		Log.d( "SpaceClass", "Img address Called" );
    		if ( Colr == BLUE )
    		{	
    			Log.d( "SpaceClass", "Blue eval working" );
				img = "andgal_space_blu.png";
    		}
    		else if ( Colr == YELLOW )
    		{
    			Log.d( "SpaceClass", "Yellow eval working" );
				img = "andgal_space_ylw.png";
    		}
    		else if ( Colr == RED )
    		{
    			img = "andgal_space_red.png";
    		}
    		else if ( Colr == GREEN )
    		{
    			img = "andgal_spacee_grn.png";
    		}
    		else 
    		{
    			img = "null";
    		}
    		Log.d( "SpaceClass", img );
    	}
    	
    	public void createBitMap()
    	{
    		try {
    			Log.d( "bitmapCalss", "Bitmap try called");
    			assets = context.getAssets();
    			InputStream inputStream = assets.open( img );
    			bitmap = BitmapFactory.decodeStream( inputStream );
    			inputStream.close();
    		} catch (IOException e) {
    			Log.d( "bitmapClass", "Bitmap IO prob" );
    			// Spacer commet
    		} finally {
    		}
    	}
    	
    	public Bitmap getBitmap()
    	{
    		Log.d( "bitmapClass", "getBitmap called" );
    		return bitmap;
    	}
    	
    	public void clearBitmap()
    	{
    		bitmap.recycle();
    	}
    	
    	public void draw( Canvas canvas, float deltaTime )
    	{
    		canvas.drawBitmap( getBitmap, X, Y, null );
    		for ( i = 0; i <= bulletArray.size(); i++ )
    		{
    			Bullet o = ( Bullet ) bulletArray.get( i );
    			canvas.drawRect( o.getRect(), shotPaint );
    		}
    		updatePos( deltaTime );
    	}
	}
    
        public class Bullet
        {
        	Rect posRect;
            private int spaceShipInt;
            private int direction;
            private int X;
            private int Y;
            private int State;
            
            public Bullet( int spaceShipInt )
            {
                this.spaceShipInt = spaceShipInt;
                int State = 1;
                if ( spaceShipInt == 1 )
                    direction = DOWN;
                    X = datTrack.grabTopX();
                    Y = ( datTrack.grabTopY() + 101 ); 
                if ( spaceShipInt == 2 )
                    direction = UP;
                    X = datTrack.grabBottX();
                    Y = datTrack.grabBottY();
                    
                BulletRect();
            }
            
            public void BulletRect()
            {
                posRect = new Rect( X, Y, ( X + 20 ), ( Y + 50 ) );
            }
            
            public void updatePos( float deltaTime )
            {
                float deltaMove = 10 * deltaTime;
                
                if ( direction == UP )
                    Y += deltaMove;
                if ( direction == DOWN )
                    Y -= deltaMove;
                collisionCheck();        
            }
            
            public void collisionCheck()
            {
                if ( spaceShipInt == 1 && ( Y + 50 ) == datTrack.grabTopY() )
                {
                    destroy();
                }
                else if ( spaceShipInt == 2 && Y == ( datTrack.grabBottY() + 100) )
                {
                    destroy();
                }
                else 
                {
                    BulletRect();
                }   
            }
            
            public Rect getRect( float deltaTime )
            {	
            	updatePos( deltaTime );
                return posRect;
            }
             
            public void destroy()
            { 
                X = 0;
                Y = 0;
                State = 0; 
            }
            
            public int getState()
            {
                return State;
            }
        }
        
        public class DataTracker
        {
            private int TopX;
            private int TopY;
            private int BottX;
            private int BottY;
            public DataTracker()
            {
                
            }
            
            public void reportUpdateTop( int spaceX, int spaceY )
            {
                spaceX = TopX;
                spaceY = TopY;
            }
            
            public void reportUpdateBott( int spaceX, int spaceY )
            {
                spaceX = BottX;
                spaceY = BottY;
            }
            
            public int grabTopX()
            {
                return TopX;
            }
            
            public int grabBottX()
            {
                return BottX;
            }
            
            public int grabTopY()
            {
                return TopY;
            }
            
            public int grabBottY()
            {
                return BottY;
            }
        }
}
