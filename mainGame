package com.android.andGal.mainGame;

import java.io.IOException;
import java.io.InputStream;

import android.os.Bundle;
import android.app.Activity;
import android.support.v4.view.MotionEventCompat;
import android.util.Log;
import android.content.Context;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Rect;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.Window;
import android.view.WindowManager;

public class AndroidGal extends Activity implements OnTouchListener
{
 // All global objects needed
    FastRenderView renderView;
    
    SpaceShip tSpaceShip;
    SpaceShip bSpaceShip;
    
    int BLUE = 1;
    int YELLOW = 2;
    int RED = 3;
    int GREEN = 4;
    

	public void onCreate( Bundle savedInstanceState )
	{
		super.onCreate( savedInstanceState );
        
        tSpaceShip = new SpaceShip( this, BLUE );
        bSpaceShip = new SpaceShip( this, YELLOW );
        
        tSpaceShip.setImgAddress();
        bSpaceShip.setImgAddress();
        
   		tSpaceShip.createBitMap();
   		bSpaceShip.createBitMap();
   		
   		Log.d( "onCreate", "instillizing done" );
   		
		// Requesting the fullscreen for the activity
		requestWindowFeature( Window.FEATURE_NO_TITLE );
		getWindow().setFlags( WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN );
 		
 		
		// Starting up the rendering
		renderView = new FastRenderView( this );
		renderView.setOnTouchListener( this );

		Log.d( "onCreate", "contentViewset" );

		setContentView( renderView );
	}

	public boolean onTouch( View v, MotionEvent event )
	{
		// Initilizing some varibles for multi-touch
		int halfHeight = renderView.getHeight() / 2;
		int maxCount = event.getPointerCount();
		int action = MotionEventCompat.getActionMasked( event );
		Log.d("KevinApp", "OnTouch: " + String.valueOf( action ));
		for ( int i = 0; i < maxCount; i++ )
		{
			// int mActivePointerId = event.getPointerId( i );
			// int pointerIndex = event.findPointerIndex( mActivePointerId );
			// int index = MotionEventCompat.getActionIndex( event );
   
			// Reacting to the finger taps
			switch( action )
			{
				case MotionEvent.ACTION_DOWN:
				case MotionEvent.ACTION_POINTER_DOWN:
				case MotionEvent.ACTION_MOVE:
					if ( MotionEventCompat.getY( event, i ) < halfHeight )
					{
						//curPointPosXtwo = (int) MotionEventCompat.getX( event, i );
						// curPointPosYtwo = (int) MotionEventCompat.getY( event, i );
					}
					if ( MotionEventCompat.getY( event, i ) > halfHeight )
					{
						//curPointPosXone = (int) MotionEventCompat.getX( event, i );
						// curPointPosYone = (int) MotionEventCompat.getY( event, i );
					}
			break;
			}
		}	
		return true;
	}

	protected void onResume()
	{
		Log.d( "mainClass", "OnResume" );
		super.onResume();
		renderView.resume();
	}

	protected void onPause()
	{
		Log.d( "mainClass", "OnPause" );
		super.onPause();
		renderView.pause();
	}	  

	class FastRenderView extends SurfaceView implements Runnable 
	{
		Thread renderThread = null;
		SurfaceHolder holder;
		volatile boolean running = false;
		Paint paint;
 
		public FastRenderView( Context context )
		{
			super( context );
			holder = getHolder();
			paint = new Paint();
			Log.d( "renderClass", "Consructor works!" );
		}
 
		public void resume()
		{
			Log.d( "renderClass", "resume called" );
			running = true;
			renderThread = new Thread( this );
			renderThread.start();
		}	
 
		public void run()
		{
			Log.d( "renderClass", "before loop" );
			long startTime = System.nanoTime();
			while( running )
			{
				// Setting up the time
				float deltaTime = ( System.nanoTime() - startTime ) * 1000000000.0f;

				// Starting the main rendering part of the thread
				if( !holder.getSurface().isValid() )
					continue;
				Canvas canvas = holder.lockCanvas();

				Log.d( "renderClass", "starting to draw" );

				canvas.drawRGB( 0, 0, 0 );
				paint.setStyle( Style.FILL );
				int width = canvas.getWidth();
				int height = canvas.getHeight();

				canvas.drawBitmap( tSpaceShip.getBitmap(), 350, 0, null );
				canvas.drawBitmap( bSpaceShip.getBitmap(), 350, 1180, null );

				// Cleaning and re-orientating
				holder.unlockCanvasAndPost( canvas );

				Log.d( "renderClass", "posted the canvas" );

			}
		}
 
		public void pause() 
		{
			Log.d( "renderClass", "pauseCalled");
			running = false;
			while( true )
			{
				try {
					renderThread.join();
					Log.d( "renderClass", "Pause thread joined" );
					return;
				} catch ( InterruptedException e ) {
					//retry
					Log.d( "renderClass", "interupped exception" );
				}
			}
		}
        
	}
    
        public class SpaceShip
    {
     	private int clipStat;
 		private int Color; 
		private int reloadLoop;
		private int bulletRX;
		private int bulletTY;
		private int bulletLX;
		private int bulletBY;
		AssetManager assets;
    	Bitmap bitmap;
    	Context context;
    	String img;
 	
    	public SpaceShip( Context myContext, int clr )
    	{
    		Log.d( "SpaceClass", "Constructor works" );
    		clipStat = 6;
    		reloadLoop = 0;
    		Color = clr;
    		context = myContext;
    	}
    	
    	public void shoot()
    	{
    		if ( clipStat == 6 )
    		{
    			clipStat = 5;
    		}
    		
    		if ( clipStat == 5 )
    		{
    			clipStat = 4;
    		}
    		
    		if ( clipStat == 4 )
    		{
    			clipStat = 3;
    		}
    		
    		if ( clipStat == 3 )
    		{
    			clipStat = 2;
    		}
    		
    		if ( clipStat == 2 )
    		{
    			clipStat = 1;
    		}
    		
    		if ( clipStat == 1 )
    		{
    			clipStat = 0;
    		}
    		
    		if ( clipStat == 0 )
    		{
    			reloadLoop++;
    		}
    		
  			if ( clipStat == 0 && reloadLoop == 1 )
  			{
  				reloadLoop = 0;
  				clipStat = 6;
  			}
    	}
    	
    	public void setImgAddress()
    	{
    		Log.d( "SpaceClass", "Img address Called" );
    		if ( Color == BLUE )
    		{	
    			Log.d( "SpaceClass", "Blue eval working" );
				img = "andgal_space_blu.png";
    		}
    		else if ( Color == YELLOW )
    		{
    			Log.d( "SpaceClass", "Yellow eval working" );
				img = "andgal_space_ylw.png";
    		}
    		else if ( Color == RED )
    		{
    			img = "andgal_space_red.png";
    		}
    		else if ( Color == GREEN )
    		{
    			img = "andgal_spacee_grn.png";
    		}
    		else 
    		{
    			img = "null";
    		}
    		
    		Log.d( "SpaceClass", img );
    	}
    	
    	public void createBitMap()
    	{
    		try {
    			Log.d( "bitmapCalss", "Bitmap try called");
    			assets = context.getAssets();
    			InputStream inputStream = assets.open( img );
    			bitmap = BitmapFactory.decodeStream( inputStream );
    			inputStream.close();
    		} catch (IOException e) {
    			Log.d( "bitmapClass", "Bitmap IO prob" );
    			// Spacer commet
    		} finally {
    		}
    	}
    	
    	public Bitmap getBitmap()
    	{
    		Log.d( "bitmapClass", "getBitmap called" );
    		return bitmap;
    	}
    	
    	public void clearBitmap()
    	{
    		bitmap.recycle();
    	}
    	
    	public int height()
    	{
    		return bitmap.getHeight();
    	}
    	
    	public int width()
    	{
    		return bitmap.getWidth();
    	}
	}
}
